#!/usr/bin/perl

use strict;
use warnings;

use DBI;
use JSON;
use File::Temp;
use KSP;

binmode \*STDOUT, ":utf8";

##################################################

# process parameters

##################################################

our $script = $0;
$script =~ s/.*\///;
our $usage = "usage: $script [ -di ] [ <db> ] <save file or save name>\n";

use Getopt::Std;
our %opt = ();
getopts("di", \%opt) or die $usage;

our $DEBUG = $opt{d};
our $INDEX = $opt{i};
our $RUNSQLITE;

our $SW = KSP::StopWatch->new();

our ($DBNAME, $SFSNAME);
if (@ARGV == 2) {
	($DBNAME, $SFSNAME) = @ARGV;
} elsif (@ARGV == 1) {
	$DBNAME = File::Temp->new(DIR => "/var/tmp", TEMPLATE => "$script-XXXXXXXX", SUFFIX => ".db");
	($SFSNAME) = @ARGV;
	$RUNSQLITE = 1;
} else {
	die $usage;
}

if ($ENV{KSPHOME} && $SFSNAME !~ /\// && ! -f $SFSNAME) {
	$SFSNAME = "$ENV{KSPHOME}/saves/$SFSNAME/quicksave.sfs";
}

##################################################

# analyze savefile

##################################################

our $system = KSP::SolarSystem->new();

sub extractPrefix($@) {
	my ($str, @re) = @_;
	foreach my $re (@re) {
		$str =~ $re and return ($1, $2);
	}
	("", $str)
}

sub parseScienceId($) {
	my ($id) = @_;
	my $tmp = $id;
	my $experiment = $tmp =~ s/^(.*?)@// ? $1 : undef;
	(my $body, $tmp) = extractPrefix($tmp, $system->bodyPrefixMatchers);
	(my $situation, $tmp) = extractPrefix($tmp, $system->situationPrefixMatchers);
	(my $biome, $tmp) = extractPrefix($tmp, $system->body($body)->biomePrefixMatchers);

	if ($biome && $tmp) {
		$biome = "$biome$tmp";
		$tmp = "";
	}

	if (!$tmp && $experiment =~ s/_(\w+)$//) {
		$tmp = $1;
	}

	my @ret = map { (defined $_ && $_ eq "") ? undef : $_ } ($experiment, $body, $situation, $biome, $tmp);
	wantarray ? @ret : \@ret
}

$SW->reset->start;
printf "-- Parsing sfs $SFSNAME\n";
our $SFS = KSP::ConfigNode->load($SFSNAME);
printf "-- Parsed sfs in %1.3f seconds\n", $SW->read;

##################################################

# save to sqlite

##################################################

printf "-- Creating db $DBNAME\n";
our $DB = DBI->connect("dbi:SQLite:dbname=$DBNAME", "", "", {
	AutoCommit => 1,
	RaiseError => 1,
});

sub qi($) {
	$DB->quote_identifier($_[0])
}

sub run($) {
	my ($cmd) = @_;
	$cmd =~ s/^\s+//;
	$cmd =~ s/\s+$//;
	local $| = 1;
	print "sql> $cmd; " if $DEBUG;
	my $sw = KSP::StopWatch->new->start;
	my $ret = $DB->do($cmd);
	printf "-- %1.3fs\n", $sw->read if $DEBUG;
	$ret
}

our @Q = ();

sub enqueue($) {
	push @Q, @_;
}

sub runqueue() {
	run(shift @Q) while @Q;
}

our %insert_count = ();

sub create($@) {
	my ($table, @col) = @_;
	my @idx = ();
	$insert_count{$table} = 0;
	run("drop table if exists " . qi($table));
	run("create table " . qi($table) . " ("
		. join(",", map {
			my $col = $_;
			my $type = "text collate nocase";
			if ($col =~ s/:(\w+)$//) {
				# warn "COL\t$col\t$type";
				if ($1 eq "r") {
					$type = "real";
				} elsif ($1 eq "b") {
					$type = "boolean";
				}
			}
			push @idx, $col;
			"\n\t" . qi($col) . " " . $type
		} @col)
		. ")");
	if ($INDEX) {
		foreach my $c (@idx) {
			enqueue("create index " . qi("idx_${table}_${c}") . " on " . qi($table) . " (" . qi($c). ")");
		}
	}
}

our %_insert_handle = ();

sub insert($@) {
	my ($table, @val) = @_;
	@val == 1 && ref $val[0] eq "ARRAY" and @val = @{$val[0]};
	my $n = @val;
	my $h = $_insert_handle{$table}[$n] ||= do {
		my $i = "insert into " . qi($table) . " values (" . join(", ", (("?") x $n)) . ")";
		# print "-- $i\n";
		$DB->prepare_cached($i)
	};
	$insert_count{$table}++;
	$h->execute(map {
		!defined ? undef :
		/^false$/i ? 0 :
		/^true$/i ? 1 :
		$_
	} @val)
}

create(biomes => qw(body biome ismini:b));
$SW->reset->start;
$DB->begin_work;
foreach my $b ($system->bodies) {
	foreach my $i (undef, $b->biomes) {
		insert("biomes", $b->name, $i, 0);
	}
	foreach my $i ($b->miniBiomes) {
		insert("biomes", $b->name, $i, 1);
	}
}
$DB->commit;
printf "-- Generated biomes [$insert_count{biomes}] in %1.3f seconds\n", $SW->read;

create(roc => qw(body biome name));
$SW->reset->start;
$DB->begin_work;
foreach my $b ($system->bodies) {
	my $i = $b->rocInfo;
	foreach my $r (keys %$i) {
		foreach my $n (@{$i->{$r}}) {
			insert("roc", $b->name, $n, $r);
		}
	}
}
$DB->commit;
printf "-- Generated roc [$insert_count{roc}] in %1.3f seconds\n", $SW->read;

my $scienceGainMultiplier = 1;
foreach my $c ($SFS->find("CAREER")) {
	my $sm = 1 * $c->get("ScienceGainMultiplier");
	$sm > 0 && $sm < 1.00001 and $scienceGainMultiplier = $sm;
}

create(science => qw(experiment body situation biome extra asc avail:r sci:r cap:r id));
$SW->reset->start;
$DB->begin_work;
foreach my $n ($SFS->find("Science", id => qr/\@/)) {
	my $id = $n->get("id");
	my $asc = $n->get("asc") =~ /true/i ? 1 : 0;
	my $avail = $n->get("scv");
	$asc or $avail = 1 - $avail;
	my $sci = $scienceGainMultiplier * $n->get("sci");
	my $cap = $scienceGainMultiplier * $n->get("cap");
	insert("science", parseScienceId($id),
		$asc, $avail, $sci, $cap, $id);
}
$DB->commit;
printf "-- Generated science [$insert_count{science}] in %1.3f seconds\n", $SW->read;

my @roster_cols = qw(name gender type trait state badS:b hero:b veteran:b tour:b inactive:b);
create(roster => @roster_cols);
create(career => qw(name flight body situation));
s/:\w+$// foreach @roster_cols;
$SW->reset->start;
$DB->begin_work;
my $career_count = 0;
foreach my $r ($SFS->find("ROSTER")) {
	foreach my $k ($r->getnodes("KERBAL")) {
		insert("roster", map { scalar $k->get($_) } @roster_cols);
		my $n = $k->get("name");
		my $c = $k->getnodes("CAREER_LOG");
		if ($n && $c) {
			foreach my $l ($c->values) {
				my $k = $l->name;
				$k =~ /^[0-9]+$/ or next;
				my ($s, $b) = split /\s*,\s*/, $l->value;
				insert("career", $n, $k, $b, $s);
			}
		}
	}
}
$DB->commit;
printf "-- Generated roster [$insert_count{roster}], career [$insert_count{career}] in %1.3f seconds\n", $SW->read;

enqueue("analyze");
enqueue("vacuum");

runqueue();

if ($RUNSQLITE) {
	system "sqlite3", $DBNAME;
}

