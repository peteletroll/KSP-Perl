#!/usr/bin/perl

use strict;
use warnings;

use DBI;
use JSON;
use KSP qw(:bodies);

binmode \*STDOUT, ":utf8";

our $script = $0;
$script =~ s/.*\///;
our $usage = "usage: $script [ -d ] <db> <savefile>\n";

use Getopt::Std;
our %opt = ();
getopts("d", \%opt) && @ARGV == 2 or die $usage;
our $DEBUG = $opt{d};

my $sw = KSP::StopWatch->new();

##################################################

# analyze savefile

##################################################

sub extractPrefix($@) {
	my ($str, @re) = @_;
	foreach my $re (@re) {
		$str =~ $re and return ($1, $2);
	}
	("", $str)
}

sub parseScienceId($) {
	my ($id) = @_;
	my $tmp = $id;
	my $experiment = $tmp =~ s/^(.*?)@// ? $1 : undef;
	(my $body, $tmp) = extractPrefix($tmp, Sun->system->bodyPrefixMatchers);
	(my $situation, $tmp) = extractPrefix($tmp, Sun->system->situationPrefixMatchers);
	my $biome = $tmp;

	my @ret = map { (defined $_ && $_ eq "") ? undef : $_ } ($body, $situation, $biome, $experiment);
	wantarray ? @ret : \@ret
}

$sw->reset->start;
my $sfs = KSP::ConfigNode->load($ARGV[1]);
printf "-- parsed sfs in %1.3f seconds\n", $sw->read;

##################################################

# save to sqlite

##################################################

our $db = DBI->connect("dbi:SQLite:dbname=$ARGV[0]", "", "", {
	AutoCommit => 1,
	RaiseError => 1,
});

sub qi($) {
	$db->quote_identifier($_[0])
}

sub run($) {
	my ($cmd) = @_;
	$cmd =~ s/^\s+//;
	$cmd =~ s/\s+$//;
	local $| = 1;
	print "sql> $cmd; " if $DEBUG;
	my $sw = KSP::StopWatch->new->start;
	my $ret = $db->do($cmd);
	printf "-- %1.3fs\n", $sw->read if $DEBUG;
	$ret
}

our @Q = ();

sub enqueue($) {
	push @Q, @_;
}

END {
	print "-- closing\n";
	run($_) foreach @Q;
}

sub create($@) {
	my ($table, @col) = @_;
	run("drop table if exists " . qi($table));
	run("create table " . qi($table) . " ("
		. join(",", map { "\n\t" . qi($_) . " text collate nocase" } @col)
		. ")");
	foreach my $c (@col) {
		enqueue("create index " . qi("idx_${table}_${c}") . " on " . qi($table) . " (" . qi($c). ")");
	}
}

our $insert_count = 0;
our %_insert_handle = ();

sub insert($@) {
	my ($table, @val) = @_;
	@val == 1 && ref $val[0] eq "ARRAY" and @val = @{$val[0]};
	my $n = @val;
	my $h = $_insert_handle{$table}[$n] ||= do {
		my $i = "insert into " . qi($table) . " values (" . join(", ", (("?") x $n)) . ")";
		print "-- $i\n";
		$db->prepare_cached($i)
	};
	$insert_count++;
	$h->execute(@val)
}

create(biomes => qw(body biome));
$sw->reset->start;
$db->begin_work;
$insert_count = 0;
foreach my $b (Kerbin->system->bodies) {
	foreach my $i (undef, $b->biomes, $b->miniBiomes) {
		insert("biomes", $b->name, $i);
	}
}
$db->commit;
printf "-- generated biomes [$insert_count] in %1.3f seconds\n", $sw->read;

create(science => qw(body situation biome experiment id));
$sw->reset->start;
$db->begin_work;
$insert_count = 0;
foreach my $n ($sfs->find("Science", id => qr/\@/)) {
	my $id = $n->get("id");
	insert("science", parseScienceId($id), $id);
}
$db->commit;
printf "-- generated science [$insert_count] in %1.3f seconds\n", $sw->read;

my @roster_cols = qw(name gender type trait badS veteran tour state inactive);
create(roster => @roster_cols);
$sw->reset->start;
$db->begin_work;
$insert_count = 0;
foreach my $r ($sfs->find("ROSTER")) {
	foreach my $k ($r->getnodes("KERBAL")) {
		insert("roster", map { scalar $k->get($_) } @roster_cols);
	}
}
$db->commit;
printf "-- generated roster [$insert_count] in %1.3f seconds\n", $sw->read;

enqueue("analyze");
enqueue("vacuum");

