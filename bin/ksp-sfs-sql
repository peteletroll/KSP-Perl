#!/usr/bin/perl

use strict;
use warnings;

use lib "lib";

use DBI;
use JSON;
use KSP qw(:bodies);

binmode \*STDOUT, ":utf8";

our $script = $0;
$script =~ s/.*\///;
our $usage = "usage: $script <db> <savefile>\n";

use Getopt::Std;
our %opt = ();
getopts("", \%opt) && @ARGV == 2 or die $usage;

##################################################

# analyze savefile

##################################################

sub extractPrefix($@) {
	my ($str, @re) = @_;
	foreach my $re (@re) {
		$str =~ $re and return ($1, $2);
	}
	("", $str)
}

sub parseScienceId($) {
	my ($id) = @_;
	my $tmp = $id;
	my $experiment = $tmp =~ s/^(.*?)@// ? $1 : undef;
	(my $body, $tmp) = extractPrefix($tmp, Sun->system->bodyPrefixMatchers);
	(my $situation, $tmp) = extractPrefix($tmp, Sun->system->situationPrefixMatchers);
	my $biome = $tmp;

	my @ret = map { (defined $_ && $_ eq "") ? undef : $_ } ($body, $situation, $biome, $experiment);
	wantarray ? @ret : \@ret
}

my $sfs = KSP::ConfigNode->load($ARGV[1]);

##################################################

# save to sqlite

##################################################

my $db = DBI->connect("dbi:SQLite:dbname=$ARGV[0]", "", "", {
	AutoCommit => 1,
	RaiseError => 1,
});

sub create($@) {
	my ($table, @col) = @_;
	$db->do(qq{ drop table if exists $table });
	$db->do("create table $table ("
		. join(", ", map { "$_ text collate nocase" } @col)
		. ")");
	foreach my $c (@col) {
		$db->do(qq{ create index idx_${table}_${c} on $table ($c) });
	}
}

sub insert($@) {
	my ($table, @val) = @_;
	@val == 1 && ref $val[0] eq "ARRAY" and @val = @{$val[0]};
	my $h = $db->prepare_cached("insert into $table"
		. " values (" . join(", ", (("?") x scalar @val)) . ")");
	$h->execute(@val);
}

create(science => qw(body situation biome experiment id));
$db->begin_work;
foreach my $n ($sfs->find("Science", id => qr/\@/)) {
	my $id = $n->get("id");
	insert("science", parseScienceId($id), $id);
}
$db->commit;

create(roster => qw(name gender type trait state));
$db->begin_work;
foreach my $r ($sfs->find("ROSTER")) {
	foreach my $k ($r->getnodes("KERBAL")) {
		insert("roster", map { scalar $k->get($_) } qw(name gender type trait state));
	}
}
$db->commit;

$db->do("analyze");
$db->do("vacuum");

exit 0;

