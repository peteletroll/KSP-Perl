#!/usr/bin/perl

use strict;
use warnings;

use lib "lib";

use DBI;
use JSON;
use KSP qw(:bodies);

binmode \*STDOUT, ":utf8";

our $script = $0;
$script =~ s/.*\///;
our $usage = "usage: $script <db> <savefile>\n";

use Getopt::Std;
our %opt = ();
getopts("", \%opt) && @ARGV == 2 or die $usage;

sub extractPrefix($@) {
	my ($str, @re) = @_;
	foreach my $re (@re) {
		$str =~ $re and return ($1, $2);
	}
	("", $str)
}

sub parseScienceId($) {
	my ($id) = @_;
	my $tmp = $id;
	my $experiment = $tmp =~ s/^(.*?)@// ? $1 : undef;
	(my $body, $tmp) = extractPrefix($tmp, Sun->system->bodyPrefixMatchers);
	(my $situation, $tmp) = extractPrefix($tmp, Sun->system->situationPrefixMatchers);
	my $biome = $tmp;

	my @ret = map { (defined $_ && $_ eq "") ? undef : $_ } ($body, $situation, $biome, $experiment);
	wantarray ? @ret : \@ret
}

my $table = "science";

my @science = ();
my $s = KSP::ConfigNode->load($ARGV[1]);
foreach my $n ($s->find("Science", id => qr/\@/)) {
	my $id = $n->get("id");
	push @science, [ parseScienceId($id), $id ];
}

my $db = DBI->connect("dbi:SQLite:dbname=$ARGV[0]", "", "", {
	AutoCommit => 1,
	RaiseError => 1,
});

my @science_col = qw(body situation biome experiment id);
$db->do(qq{ drop table if exists $table });

$db->do("create table $table ("
	. join(", ", map { "$_ text collate nocase" } @science_col)
	. ")");

$db->begin_work;
foreach my $s (@science) {
	my $h = $db->prepare_cached(qq{
		insert into $table
		values (?, ?, ?, ?, ?)
	});
	$h->execute(@$s);
}
$db->commit;

foreach my $c (@science_col) {
	$db->do(qq{ create index idx_${table}_${c} on $table ($c) });
}

$db->do("vacuum");
$db->do("analyze");

exit 0;

