#!/usr/bin/perl

use strict;
use warnings;

use DBI;
use JSON;
use KSP qw(:bodies);

binmode \*STDOUT, ":utf8";

our $script = $0;
$script =~ s/.*\///;
our $usage = "usage: $script [ -d ] <db> <savefile>\n";

use Getopt::Std;
our %opt = ();
getopts("d", \%opt) && @ARGV == 2 or die $usage;
our $DEBUG = $opt{d};

my $sw = KSP::StopWatch->new();

##################################################

# analyze savefile

##################################################

sub extractPrefix($@) {
	my ($str, @re) = @_;
	foreach my $re (@re) {
		$str =~ $re and return ($1, $2);
	}
	("", $str)
}

sub parseScienceId($) {
	my ($id) = @_;
	my $tmp = $id;
	my $experiment = $tmp =~ s/^(.*?)@// ? $1 : undef;
	(my $body, $tmp) = extractPrefix($tmp, Sun->system->bodyPrefixMatchers);
	(my $situation, $tmp) = extractPrefix($tmp, Sun->system->situationPrefixMatchers);
	my $biome = $tmp;

	my @ret = map { (defined $_ && $_ eq "") ? undef : $_ } ($body, $situation, $biome, $experiment);
	wantarray ? @ret : \@ret
}

$sw->reset->start;
my $sfs = KSP::ConfigNode->load($ARGV[1]);
printf "-- parsed sfs in %1.3f seconds\n", $sw->read;

##################################################

# save to sqlite

##################################################

my $db = DBI->connect("dbi:SQLite:dbname=$ARGV[0]", "", "", {
	AutoCommit => 1,
	RaiseError => 1,
});

sub qi($) {
	$db->quote_identifier($_[0])
}

sub run($) {
	my ($cmd) = @_;
	$cmd =~ s/^\s+//;
	$cmd =~ s/\s+$//;
	print "sql> $cmd;\n" if $DEBUG;
	$db->do($cmd)
}

sub create($@) {
	my ($table, @col) = @_;
	run("drop table if exists " . qi($table));
	run("create table " . qi($table) . " ("
		. join(",", map { "\n\t" . qi($_) . " text collate nocase" } @col)
		. ")");
	foreach my $c (@col) {
		run("create index " . qi("idx_${table}_${c}") . " on " . qi($table) . " (" . qi($c). ")");
	}
}

sub insert($@) {
	my ($table, @val) = @_;
	@val == 1 && ref $val[0] eq "ARRAY" and @val = @{$val[0]};
	my $h = $db->prepare_cached("insert into $table"
		. " values (" . join(", ", (("?") x scalar @val)) . ")");
	$h->execute(@val);
}

$sw->reset->start;
create(biomes => qw(body biome));
$db->begin_work;
foreach my $b (Kerbin->system->bodies) {
	foreach my $i (undef, $b->biomes, $b->miniBiomes) {
		insert("biomes", $b->name, $i);
	}
}
$db->commit;
printf "-- created biomes in %1.3f seconds\n", $sw->read;

$sw->reset->start;
create(science => qw(body situation biome experiment id));
$db->begin_work;
foreach my $n ($sfs->find("Science", id => qr/\@/)) {
	my $id = $n->get("id");
	insert("science", parseScienceId($id), $id);
}
$db->commit;
printf "-- created science in %1.3f seconds\n", $sw->read;

$sw->reset->start;
create(roster => qw(name gender type trait state));
$db->begin_work;
foreach my $r ($sfs->find("ROSTER")) {
	foreach my $k ($r->getnodes("KERBAL")) {
		insert("roster", map { scalar $k->get($_) } qw(name gender type trait state));
	}
}
$db->commit;
printf "-- created roster in %1.3f seconds\n", $sw->read;

$sw->reset->start;
run("analyze");
run("vacuum");
printf "-- finalized in %1.3f seconds\n", $sw->read;

exit 0;

