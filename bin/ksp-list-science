#!/usr/bin/perl

use strict;
use warnings;

use lib "lib";

use Data::Dump qw(dump);
use JSON;
use KSP qw(:bodies);

binmode \*STDOUT, ":utf8";

our $script = $0;
$script =~ s/.*\///;
our $usage = "usage: $script [ -s <sqlitedb> ] <savefile>\n";

use Getopt::Std;
our %opt = ();
getopts("s:", \%opt) && @ARGV == 1 or die $usage;

sub extractPrefix($@) {
	my ($str, @re) = @_;
	foreach my $re (@re) {
		$str =~ $re and return ($1, $2);
	}
	("", $str)
}

sub parseScienceId($) {
	my ($id) = @_;
	my $tmp = $id;
	my $experiment = $tmp =~ s/^(.*?)@// ? $1 : undef;
	(my $body, $tmp) = extractPrefix($tmp, Sun->system->bodyPrefixMatchers);
	(my $situation, $tmp) = extractPrefix($tmp, Sun->system->situationPrefixMatchers);
	my $biome = $tmp;

	my @ret = map { (defined $_ && $_ eq "") ? undef : $_ } ($body, $situation, $biome, $experiment);
	wantarray ? @ret : \@ret
}

my @lst = ();
my $s = KSP::ConfigNode->load($ARGV[0]);
foreach my $n ($s->find("Science", id => qr/\@/)) {
	my $id = $n->get("id");
	push @lst, [ parseScienceId($id), $id ];
}

if (defined $opt{s}) {
	require DBI;
	my $db = DBI->connect("dbi:SQLite:dbname=$opt{s}", "", "", {
		AutoCommit => 0,
		RaiseError => 1,
	});
	my $table = "kspscience";
	my @col = qw(body situation biome experiment id);
	$db->do(qq{ drop table if exists $table });
	$db->do("create table $table ("
		. join(", ", map { "$_ text collate nocase" } @col)
		. ")");
	foreach my $c (@col) {
		$db->do(qq{ drop index if exists idx_$c});
	}
	foreach my $s (@lst) {
		my $h = $db->prepare_cached(qq{
			insert into $table
			values (?, ?, ?, ?, ?)
		});
		$h->execute(@$s);
	}
	$db->commit();
	foreach my $c (@col) {
		$db->do(qq{ create index idx_${table}_${c} on $table ($c) });
	}
	$db->commit();
} else {
	foreach my $s (@lst) {
		print join("\t", map { defined($_) && $_ ne "" ? $_ : "NULL" } @$s), "\n";
	}
}

exit 0;

